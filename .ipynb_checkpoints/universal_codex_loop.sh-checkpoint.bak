#!/usr/bin/env bash
# universal_codex_loop.sh — StrongPNT (resilient)
set -euo pipefail

# --- Config (can override in .codex_config or env) ---
PROJECT_TYPE="${PROJECT_TYPE:-code}"        # 'code' or 'research'
SLEEP_SECS="${SLEEP_SECS:-45}"              # default loop sleep
PROGRESS_TAIL="${PROGRESS_TAIL:-40000}"     # context size (bytes)
MODEL="${MODEL:-gpt-5 high}"                # model name
CODEX_FLAGS="${CODEX_FLAGS:-}"              # extra flags if your codex supports them
BASE_SLEEP_SECS="$SLEEP_SECS"               # remember the base sleep

# Backoff for rate limits/transient failures
BACKOFF_SECS="${BACKOFF_SECS:-120}"
MAX_BACKOFF_SECS="${MAX_BACKOFF_SECS:-1800}"

PROJECT="${1:-$PWD}"
cd "$PROJECT"
[ -f .codex_config ] && source .codex_config

# If research and user didn't *explicitly* set SLEEP_SECS, bump it
if [ "$PROJECT_TYPE" = "research" ] && [ "${SLEEP_SECS:-}" = "$BASE_SLEEP_SECS" ]; then
  # Only override if user hasn't already changed it in env or .codex_config
  SLEEP_SECS="${RESEARCH_SLEEP_SECS:-450}"
  BASE_SLEEP_SECS="$SLEEP_SECS"
fi

command -v codex >/dev/null || { echo "ERROR: 'codex' CLI not found"; exit 1; }

mkdir -p logs
touch PROGRESS3.md

# Base prompt based on project type
if [ "$PROJECT_TYPE" = "research" ]; then
  BASE_PROMPT='You are managing research experiments.
Rules:
- Check if experiments are running before starting new ones
- Real experiments take hours - be patient
- Log actual results, never make up numbers
- Start one experiment at a time'
else
  BASE_PROMPT='You are working on this repository.
Rules:
- Make one small, testable improvement per iteration
- Apply changes directly
- Document progress in PROGRESS3.md
- Keep changes focused and atomic'
fi

echo "[startup] universal_codex_loop.sh in $PWD (type=$PROJECT_TYPE, sleep=${SLEEP_SECS}s)"

i=0
current_sleep="$SLEEP_SECS"

while true; do
  [ -f STOP ] && { echo "[stop] STOP file detected"; exit 0; }

  TS="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  PROG_TAIL="$(tail -c "$PROGRESS_TAIL" PROGRESS3.md 2>/dev/null || true)"
  SPEC="$(cat AGENTS.md 2>/dev/null || echo "No AGENTS.md found")"

  FULL_PROMPT="$BASE_PROMPT

Current PROGRESS3.md (tail):
$PROG_TAIL

Project specification (AGENTS.md):
$SPEC

Time: $TS

Act on ONE small improvement now, strictly following AGENTS.md (Lean PNT rules).
"

  echo "[$TS] calling codex (sleep next: ${current_sleep}s)..."

  # Run codex and capture status without letting set -e kill the loop
  tmpfile="$(mktemp)"
  set +e
  codex exec \
    --model "$MODEL" \
    --sandbox workspace-write \
    $CODEX_FLAGS \
    "$FULL_PROMPT" >"$tmpfile" 2>&1
  status=$?
  set -e

  mv "$tmpfile" "logs/last_codex.txt"

  if [ $status -ne 0 ]; then
    echo "[$TS] codex failed (exit $status). See logs/last_codex.txt"

    # Check for rate-limit / transient signals and backoff
    if grep -qiE '(rate.?limit|429|retry|temporar(y|ily) unavailable|timeout|ECONN|ETIMEDOUT)' logs/last_codex.txt; then
      current_sleep=$(( current_sleep * 2 ))
      [ $current_sleep -gt $MAX_BACKOFF_SECS ] && current_sleep="$MAX_BACKOFF_SECS"
      echo "[$TS] transient error: backing off to ${current_sleep}s"
    else
      # Hard error: don’t exponential backoff forever; pause a bit then continue
      current_sleep="$BACKOFF_SECS"
      echo "[$TS] non-transient error: pausing ${current_sleep}s then continuing"
    fi
  else
    # Success — reset sleep to base cadence
    current_sleep="$BASE_SLEEP_SECS"
  fi

  # Every 10 iterations: clear PROGRESS3.md (as in your script)
  i=$((i+1))
  if [ $((i % 10)) -eq 0 ]; then
    echo "[$TS] clearing PROGRESS3.md (iteration $i)"
    : > PROGRESS3.md
  fi

  sleep "$current_sleep"
done
